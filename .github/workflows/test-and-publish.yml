name: Publish Package

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4.1.7
    - uses: actions/setup-python@v5.1.0
      with:
        python-version: '3.12'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    - name: Build package
      run: python -m build

  lint:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4.1.7
    - uses: actions/setup-python@v5.1.0
      with:
        python-version: '3.12'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .
        pip install pylint
    - name: Run pylint
      run: |
        pylint src/dev_tools/

  test:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.10', '3.11', '3.12']
    steps:
    - uses: actions/checkout@v4.1.7
    - uses: actions/setup-python@v5.1.0
      with:
        python-version: ${{ matrix.python-version }}
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .
        pip install coverage codecov
    - name: Run tests with coverage
      env:
        PYTHONPATH: src
      run: |
        coverage run -m unittest discover -s src/tests -p "test_*.py"
        coverage xml
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4.5.0
      with:
        file: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}

  publish:
    needs: [build, lint, test]
    runs-on: windows-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4.1.7
    - uses: actions/setup-python@v5.1.0
      with:
        python-version: '3.12'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install .
    - name: Build package
      run: python -m build
    - name: Publish package to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: python -m twine upload dist/*
